name: Build LEDE Firmware

on:
  workflow_dispatch:  # 手动触发编译
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: timiil/coolsnowwolf-lede-builder:latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Prepare Build Environment
      run: |
        # 安装必要依赖
        apt-get update
        apt-get install -y \
          build-essential \
          libncurses5-dev \
          libncursesw5-dev \
          zlib1g-dev \
          gawk \
          gettext \
          unzip \
          file \
          python3 \
          rsync \
          wget \
          curl \
          git \
          subversion \
          mercurial
        
        # 设置环境变量
        export FORCE_UNSAFE_CONFIGURE=1
        
        # 恢复原始源设置
        sed -i 's|ghproxy.com/https://github.com|github.com|g' feeds.conf.default
        sed -i 's|ghproxy.com/https://git.openwrt.org|git.openwrt.org|g' feeds.conf.default
        
        # 仅保留下载镜像加速
        sed -i 's|https://downloads.openwrt.org|https://mirror.sjtu.edu.cn/openwrt|g' scripts/download.pl
        
        # 更新 feeds
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Preconfigure Environment
      run: |
        # 强制重新构建工具链
        rm -rf tools toolchain
        
        # 单独构建工具链
        make tools/install -j$(($(nproc) - 1)) V=sc
        make toolchain/install -j$(($(nproc) - 1)) V=sc

    - name: Configure Firmware
      run: |
        # 使用精简配置
        echo "CONFIG_TARGET_x86=y" > .config
        echo "CONFIG_TARGET_x86_64=y" >> .config
        echo "CONFIG_TARGET_ROOTFS_EXT4FS=y" >> .config
        
        # 禁用可能出问题的组件
        echo "CONFIG_TOOLCHAINOPTS=y" >> .config
        echo "CONFIG_GCC_USE_VERSION_12=y" >> .config  # 指定GCC版本
        echo "CONFIG_GCC_USE_GRAPHITE=n" >> .config   # 禁用可能出问题的功能
        
        # 添加必要组件
        echo "CONFIG_PACKAGE_luci=y" >> .config
        echo "CONFIG_PACKAGE_luci-app-ssr-plus=y" >> .config
        
        # 验证配置
        make defconfig

    - name: Download Packages
      run: |
        # 设置虚拟终端环境
        export TERM=dumb
        make -j$(nproc) download
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Firmware
      run: |
        # 设置虚拟终端环境
        export TERM=dumb
        
        # 设置内存限制避免OOM
        ulimit -s 32768
        
        # 分阶段编译
        make -j$(($(nproc) - 1)) tools/compile V=sc || make -j1 tools/compile V=sc
        make -j$(($(nproc) - 1)) toolchain/compile V=sc || make -j1 toolchain/compile V=sc
        make -j$(($(nproc) - 1)) target/compile V=s
        make -j$(($(nproc) - 1)) package/compile V=s
        make -j1 package/index V=s
        make -j1 V=s
      timeout-minutes: 360

    - name: Upload Firmware Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lede-firmware
        path: bin/targets/*/*

    - name: Cache Build Files
      uses: actions/cache@v4
      with:
        path: |
          dl
          build_dir
          staging_dir
          tmp
        key: ${{ runner.os }}-lede-cache-${{ hashFiles('.config') }}

    # 添加错误诊断步骤
    - name: Toolchain Debug Info
      if: ${{ failure() }}
      run: |
        echo "===== TOOLCHAIN ERROR LOGS ====="
        find tools -name 'log' -exec tail -n 100 {} \;
        find toolchain -name 'log' -exec tail -n 100 {} \;
        echo "===== COMPILER VERSION ====="
        gcc --version
        echo "===== SYSTEM INFO ====="
        uname -a
        echo "===== MEMORY USAGE ====="
        free -h
