name: Build LEDE Firmware

on:
  workflow_dispatch:  # 手动触发编译
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: timiil/coolsnowwolf-lede-builder:latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Prepare Build Environment
      run: |
        # 安装必要依赖
        apt-get update
        apt-get install -y \
          build-essential \
          libncurses5-dev \
          libncursesw5-dev \
          zlib1g-dev \
          gawk \
          gettext \
          unzip \
          file \
          python3 \
          rsync \
          wget \
          curl \
          git \
          subversion \
          mercurial
        
        # 关键修复：设置安全配置环境变量
        export FORCE_UNSAFE_CONFIGURE=1
        echo "FORCE_UNSAFE_CONFIGURE=1" >> $GITHUB_ENV
        
        # 恢复原始源设置
        sed -i 's|ghproxy.com/https://github.com|github.com|g' feeds.conf.default
        sed -i 's|ghproxy.com/https://git.openwrt.org|git.openwrt.org|g' feeds.conf.default
        
        # 仅保留下载镜像加速
        sed -i 's|https://downloads.openwrt.org|https://mirror.sjtu.edu.cn/openwrt|g' scripts/download.pl
        
        # 确保所有必要的目录存在
        mkdir -p toolchain tools scripts/config staging_dir/host/bin
        touch toolchain/Makefile tools/Makefile scripts/config/mconf
        
        # 更新 feeds
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Preconfigure Environment
      run: |
        # 创建必要的工具链文件和目录
        mkdir -p toolchain
        touch toolchain/Makefile toolchain/Config.in
        
        # 创建必要的工具文件
        mkdir -p tools
        touch tools/Makefile
        
        # 创建必要的配置工具
        mkdir -p scripts/config
        touch scripts/config/mconf scripts/config/conf
        chmod +x scripts/config/mconf scripts/config/conf
        
        # 创建伪终端库
        ln -s /usr/lib/x86_64-linux-gnu/libncursesw.so.6 /usr/lib/x86_64-linux-gnu/libncursesw.so || true

    - name: Configure Firmware
      run: |
        # 使用精简配置
        echo "CONFIG_TARGET_x86=y" > .config
        echo "CONFIG_TARGET_x86_64=y" >> .config
        echo "CONFIG_TARGET_ROOTFS_EXT4FS=y" >> .config
        
        # 禁用可能出问题的组件
        echo "CONFIG_TOOLCHAINOPTS=y" >> .config
        echo "CONFIG_GCC_USE_VERSION_11=y" >> .config
        echo "CONFIG_GCC_USE_GRAPHITE=n" >> .config
        
        # 添加必要组件
        echo "CONFIG_PACKAGE_luci=y" >> .config
        echo "CONFIG_PACKAGE_luci-app-ssr-plus=y" >> .config
        
        # 验证配置
        make defconfig

    - name: Download Packages
      run: |
        # 设置虚拟终端环境
        export TERM=dumb
        make -j$(nproc) download
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Firmware
      run: |
        # 设置虚拟终端环境
        export TERM=dumb
        
        # 关键修复：强制设置安全配置环境变量
        export FORCE_UNSAFE_CONFIGURE=1
        
        # 设置内存限制避免OOM
        ulimit -s 32768
        
        # 分阶段编译
        make -j1 tools/compile V=s  # 强制单线程编译工具
        make -j1 toolchain/compile V=s  # 强制单线程编译工具链
        make -j$(($(nproc) - 1)) target/compile V=s
        make -j$(($(nproc) - 1)) package/compile V=s
        make -j1 package/index V=s
        make -j1 V=s
      timeout-minutes: 360

    - name: Upload Firmware Artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: lede-firmware
        path: bin/targets/*/*

    # 添加错误诊断步骤
    - name: Debug Build Failure
      if: ${{ failure() }}
      run: |
        echo "===== TAR CONFIG LOG ====="
        cat build_dir/host/tar-*/config.log || true
        
        echo "===== ENVIRONMENT VARIABLES ====="
        env | sort
        
        echo "===== BUILD DIR STRUCTURE ====="
        find . -maxdepth 3 -type d | sort
        
        echo "===== MAKE PROCESSES ====="
        ps aux | grep make
